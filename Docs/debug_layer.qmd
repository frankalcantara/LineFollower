# Debug Layer Implementation

The Debug Layer implements a sophisticated data collection and analysis system that activates when `DEBUG_LEVEL` is greater than `0`. This layer operates alongside RobotZero's core functionality without impacting performance, providing deep insights into the robot's behaviour and performance metrics through careful memory management and efficient data structures.

## Data Structures Implementation

The `DataStructures.h` header defines the core data types and formats used throughout RobotZero's debug system. Each structure is carefully designed for memory efficiency and data integrity while capturing comprehensive performance data:

```cpp
enum class DebugMode : uint8_t {
    NORMAL = 0,    // No debugging (should never be set in debug)
    ANALYSIS = 1,  // Analysis mode with configurable speed
    SPEED = 2      // High speed performance analysis
};

struct EventRecord {
    uint32_t timestamp;    // Time since start
    EventType type;        // Event type
    uint16_t data;        // Event specific data
    uint8_t checksum;     // Data validation
}; // Total: 8 bytes

struct PerformanceRecord {
    uint32_t timestamp;     // Time since start
    int16_t linePosition;   // Current line position
    int16_t error;         // Current error
    int16_t correction;    // Applied correction
    uint8_t speedLeft;     // Left motor speed
    uint8_t speedRight;    // Right motor speed
    uint8_t state;         // Robot state flags
    uint8_t checksum;      // Data validation
}; // Total: 12 bytes

struct SessionHeader {
    uint32_t startTime;          // Session start timestamp
    DebugMode mode;             // Operating mode
    uint8_t plannedLaps;        // Number of laps to run
    uint8_t configuredSpeed;    // Base speed setting
    float pidKp;                // PID proportional constant
    float pidKd;                // PID derivative constant
    float filterAlpha;          // Error filter coefficient
    uint16_t sensorCalibrationData[6]; // Calibration values
    uint32_t headerChecksum;    // Header validation
}; // Total: 32 bytes
```

Each structure uses specific bit fields for efficient state encoding. For example, the `state` field in `PerformanceRecord` encodes multiple conditions:
- `Bit 0`: Precision mode active
- `Bit 1`: Turn detection active
- `Bits 2-7`: Reserved for future expansion

## Circular Buffer Implementation

The `CircularBuffer` template class provides efficient temporary storage with atomic operations:

```cpp
template<typename T, uint8_t SIZE>
class CircularBuffer {
    T buffer[SIZE];       // Static storage array
    uint8_t head;         // Write index
    uint8_t tail;         // Read index
    uint8_t count;        // Number of items
    
    bool push(const T& item) {
        if (isFull()) return false;
        buffer[head] = item;
        head = (head + 1) % SIZE;
        count++;
        return true;
    }
};
```

Buffer sizes are optimized for RobotZero's operation patterns:
- Performance Buffer: 32 records (384 bytes)
  - 50ms sampling: 1.6 seconds storage
  - 20ms sampling: 0.64 seconds storage
- Event Buffer: 16 records (128 bytes)
- Stats Buffer: 8 records (128 bytes)

Total RAM usage: 640 bytes, balancing between data retention and Arduino Nano constraints.

## Flash Memory Management

The `FlashManager` class implements a sophisticated page-aligned writing system:

```cpp
class FlashManager {
    static uint32_t currentAddress;    // Current write position
    static bool isInitialized;         // Initialization flag
    
    static bool writeBlock(const void* data, uint16_t size) {
        if (!isInitialized || !hasSpace(size)) return false;
        uint16_t pages = (size + FLASH_PAGE_SIZE - 1) / FLASH_PAGE_SIZE;
        
        for (uint16_t i = 0; i < pages; i++) {
            uint16_t pageSize = min(size, FLASH_PAGE_SIZE);
            if (!writePage(dataPtr, pageSize, address)) return false;
            address += FLASH_PAGE_SIZE;
            dataPtr += pageSize;
            size -= pageSize;
        }
        return true;
    }
};
```

Key features:
- Starts at address 0x1000 (4KB offset)
- Page-aligned writes (256 bytes)
- Write verification
- Atomic operations

## Logger Implementation

The Logger orchestrates data collection and storage:

```cpp
class Logger {
    static bool isInitialized;
    static bool loggingActive;
    static uint32_t sessionStartTime;
    
    bool shouldSample() {
        uint32_t currentTime = millis();
        int16_t position = Sensors::calculateLinePosition();
        uint32_t sampleInterval = (abs(position) > TURN_THRESHOLD) 
            ? SAMPLE_RATE_CURVE    // 20ms
            : SAMPLE_RATE_STRAIGHT;// 50ms
            
        if (currentTime - lastSampleTime >= sampleInterval) {
            lastSampleTime = currentTime;
            return true;
        }
        return false;
    }
};
```

The system implements adaptive sampling:
- Straight lines: 50ms intervals
- Curves: 20ms intervals
- Write operations during straight sections only

## Course Markers Integration

The debug layer integrates directly with the CourseMarkers system:

```cpp
void handleFinishLine() {
    lapCount++;
    if (lapCount == 2 && !isStopSequenceActive) {
        isStopSequenceActive = true;
        slowdownTimer.Start(50);
        stopTimer.Start(STOP_DELAY);
#if DEBUG_LEVEL > 0
        FlashManager::setLogReady();
#endif
    }
}
```

Events captured include:
- Lap completions
- Mode changes
- Intersection detections
- Speed transitions

## Data Transmission Protocol

The FlashReader implements a robust transmission protocol:

```cpp
class FlashReader {
    static const char START_MARKER = '$';
    static const char END_MARKER = '#';
    static const uint8_t MARKER_HEADER = 0x01;
    static const uint8_t MARKER_PERFORMANCE = 0x02;
    
    void processCommands() {
        Serial.write(START_MARKER);
        sendMarker(MARKER_HEADER);
        sendSessionHeader();
        sendMarker(MARKER_PERFORMANCE);
        sendPerformanceRecords();
        Serial.write(END_MARKER);
        sendChecksum();
        FlashManager::clearLogReady();
    }
};
```

The protocol ensures reliable data transfer through:
- Start/end markers
- Section headers
- Data validation checksums

## LED Status Patterns

The LedPattern class provides visual feedback during debug operations:

```cpp
class LedPattern {
    static Timer patternTimer;
    static bool isPatternActive;
    static uint8_t patternState;
    
    void process() {
        uint32_t elapsed = millis() - patternStartTime;
        if (elapsed >= 3000 && patternState == 0) {
            patternState = 1;
            patternTimer.Start(300);  // Fast blink
        }
        else if (elapsed >= 6000) {
            patternState = 0;
            patternTimer.Start(1000); // Slow blink
            patternStartTime = millis();
        }
    }
};
```

Patterns indicate:
- Transmission initialization (1Hz blink)
- Active data transfer (3.3Hz blink)
- Operation completion

This comprehensive debug system enables detailed analysis of RobotZero's behavior while maintaining efficient operation through careful resource management and conditional compilation.